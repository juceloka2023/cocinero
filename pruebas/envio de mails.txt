<form method='POST' action='/php/enviar.php'>
     <div class="form-group">
          <label for="nombre">Nombre</label>
          <input type="text" class="form-control" name='nombre' id="nombre" placeholder="nombre...">
     </div>
     <div class="form-group">
          <label for="email">Email</label>
          <input type="email" class="form-control" name='email' id="email" placeholder="email...">
     </div>
     <div class="form-group">
          <label for="exampleTextarea">Mensaje</label>
          <textarea class="form-control" name='mensaje' id="mensaje" rows="3"></textarea>
     </div>
     <div class="form-group">
          <input type="checkbox" required> Acepto la política de privacidad.
     </div>
     <button class="btn btn-primary" type="submit">Enviar</button>
</form>

Para ello, debemos añadir los parámetros method y action al elemento form. En el parámetro method podemos indicar dos valores; GET o POST. Es recomendable usar el método POST, ya que los datos se envían de forma segura. En el parámetro action indicaremos la ruta del script PHP que gestionará los datos y el envío. El elemento form quedaría algo semejante a esto:

<form method='POST' action='/php/enviar.php'>

<?php 
     $nombre = $_POST['nombre'];
     $email = $_POST['email'];
     $asunto = 'Formulario Rellenado';
     $mensaje = "Nombre: ".$nombre."<br> Email: $email<br> Mensaje:".$_POST['mensaje'];
     if(mail('tuEmail', $asunto, $mensaje)){
          echo "Correo enviado";
     }
 ?>

================================================================
HTML

Aunque al día de hoy casi todas las páginas están versadas en uno u otro lenguaje de servidor: ASP, PHP, JSP,… existe un amplio espectro de páginas desarrolladas en HTML. Casi siempre con la inestimable ayuda de un editor web. Y es que es mucha la gente, que con unos conocimientos mínimos de Internet, se lanza a este para contarle algo al ciber espacio. E incluso habrá sitios dónde podramos insertar código HTML y que no permite utilizar otro lenguaje

Y ya puestos, y una vez que nos hemos currado una página web, nos apetece que la gente comparta con nosotros su opinión sobre la misma. O simplemente se ponga en contacto con nosotros.

Una vez en esta tesitura, lo más fácil sería poner un texto que sea un enlace (o no) con nuestra dirección de email. Aquí, le estamos dando al comunicante solo nuestra dirección y el, la utilizará para contarnos lo que quiera. Si quieres tomar esta opción léete el articulo «Propiedades de los enlaces de email» el cual te ayudará a darle más potencia a tus enlaces de email.

Pero claro, puede ser que queramos, que cuando nos escriba, rellene cierta información que con el email no sabremos nunca si nos la va a enviar o no. Para ello tenemos los formularios. Y será entonces cuando queramos que nos envíe lo relleno en el formulario.

En este punto tenemos dos opciones. O bien tiramos de algún lenguaje de servidor (para aludidos, no tiene desperdicio Mandar emails con JavaMail)

Para que el usuario nos envíe el formulario utilizando HTML solo tendremos que hacer una cosa. Poner «mailto:miusuario@miemail.com» en el campo action del formulario. Quedándonos un código HTML como este, mediante la etiqueta FORM:
<form action="mailto:miusuario@miemail.com"></form>

Con esto conseguiremos que el usuario nos envíe un email con la estructura del formulario.

Una vez montando nuestro formulario veremos que si le damos a enviar el texto recibido puede ser algo como esto:
textfield=victor&textfield2=victor%40miemail.com&textarea=cojonuda

El problema es que para diferenciar las diferentes partes del mensaje, el navegador utiliza los identificadores de los campos. Es por ello que es bastante conveniente el modificarlos. Para tal fin hay que modificar el campo name de los campos del formulario. Podríamos ponerlos así:
<input name="nombre" type="text" />

Ahora, la cadena recibida, sería la siguiente:
nombre=victor&email=victor%40miemail.com&opinion=cojonuda

Aunque sigue siendo una cadena críptica, es algo más clara que la anterior.

Además tenemos que tener en mente un par de cosas. La primera es que esto solo funcionará si el usuario tiene un programa de correo electrónico en su ordenador (Outlook, Outlook Express, Eudora…). Hay que tener cuidado, ya que aunque es raro que el ordenador no tenga un programa de correo electrónico, puede darse el caso.

La segunda es que aunque nosotros le hayamos puesto los campos (incluso poniéndolos como obligatorios -podríamos usar JavaScript-), el usuario tiene la capacidad de modificar el email antes de enviarlo.

Aún con todo, esto es una buena solución para que se pongan en contacto con nosotros de forma sencilla.

Al final nos quedará el siguiente formulario:
<form action="mailto:contacto@lineadecodigo.com" method="post" name="form1">
  <label for="nombre">Nombre: </label>
  <input id="nombre" name="nombre" type="text" />
  <label for="email">Email: </label>
  <input id="email" name="nombre" type="text" />
  ¿Qué te pareció la página?
  <textarea id="opinion" name="opinion"></textarea>
  <input name="Submit" type="submit" value="Enviar" />
</form>

================================================================
PHP

En anteriores ejemplos hemos visto como podíamos enviar un email en PHP y cómo podíamos añadir un destinatario diferente para la respuesta. Si bien, en ambos casos, el email enviado era un email en formato texto. En este ejemplo vamos a ver cómo podemos enviar email con formato HTML en PHP.

Al enviar email con formato HTML en PHP podremos incrementar las posibilidades de visualización del mismo en los clientes de correo de nuestros destinatarios. Así podremos insertar imágenes, tablas, formularios,…

Lo primero será configurar el destinatario del correo.

$para = 'nombre@correo.com';

Después definiremos una variable para el título y otra para el contenido. En este caso el texto que insertemos en el contenido ya será puro HTML.

$titulo = 'Enviando email desde PHP';

$mensaje = '<html>'.
     '<head><title>Email con HTML</title></head>'.
     '<body><h1>Email con HTML</h1>'.
     'Esto es un email que se envía en el formato HTML'.
     '<hr>'.
     'Enviado por mi programa en PHP'.
     '</body>'.
     '</html>';

Podemos utilizar cualquier elemento HTML que queramos e incluso podemos añadir contenido CSS. Si bien hay que tener en cuenta que algunos clientes de correo son muy limitados a la hora de visualizar el contenido de los emails. Es por ello que no es muy recomendable abusar de las características, sobre todo de las de CSS.

Esto no será suficiente para poder enviar email con formato HTML en HTML. Todavía tenemos que hacer otra cosa, esta será añadir unas cabeceras en la cuales digamos que el contenido que estamos enviando es un contenido HTML.

Estas cabeceras indican que el MIME-Version es el 1.0, que el content-type es "text/html" y que el charset de codificación es "utf-8" u otro que quieras utilizar.

$cabeceras = 'MIME-Version: 1.0' . "\r\n";
$cabeceras .= 'Content-type: text/html; charset=utf-8' . "\r\n";

    Importante no olvidar que las cabeceras están separadas por líneas mediante un código CRLF (\r\n).

Ya solo nos quedará añadir la cabecera para indicarle quienes somos (los que enviamos el email):

$cabeceras .= 'From: Mi Nombre';

Y enviar el email mediante la función mail().

$enviado = mail($para, $titulo, $mensaje, $cabeceras);

if ($enviado)
  echo 'Email enviado correctamente';
else
  echo 'Error en el envío del email';

===================================================================
JAVA

Una buena funcionalidad a incluir dentro de cualquier página web es el envío de correos. El poder adjuntarla información que estamos leyendo en ese momento, vía correo a otra persona (o a sí mismo). Así que vamos a ver cómo podemos mandar emails con JavaMail.

El API de JavaMail nos permite el envío de correos. Abstrayéndonos de los protocolos de comunicación para el envío de emails (SMTP, POP3, MAIL,…).

Con muy pocas líneas de código nos permite el enviar un mensaje a una dirección de correo electrónico.

Los pasos a seguir serán:

    Propiedades del envío
    Obtener la sesión
    Configurar los campos del mensaje
    Configurar el texto del mensaje
    Enviar el mensaje

1. Propiedades de envío

Lo primero que tenemos que hacer es configurar las propiedades del envío. Es decir, cual es el servidor de correo que vamos a utilizar, si el servidor requiere autenticación, el tipo de transporte a utilizar,..

Todas las configuraciones las definimos mediante la clase Properties. Para incorporar una propiedad utilizamos el método .put(propiedad,valor)
Properties props = new Properties();
props.put("mail.smtp.host","mail.lineadecodigo.com");
props.put("mail.transport.protocol","smtp");
props.put("mail.smtp.auth", "true");
props.setProperty("mail.user", "myuser");
props.setProperty("mail.password", "mypwd");

Al menos las cuatro primeras propiedades son necesarias para realizar la conexión:

    mail.smtp.host, representa el host que hace de servidor de correo
    mail.transport.protocol, es el protocolo de comunicación que queremos utilizar para enviar el correo. En este caso es SMTP, pero podría ser mail.
    mail.smtp.auth, indica si se requiere de autenticación de SMTP.
    mail.user, es el usuario de la conexión.
    mail.password, el el password de la conexión.

2. Obtener la sesión

Una vez que tengamos definidas las propiedades, pasaremos a establecer la sesión con el servidor de correo. La sesión se establece mediante la clase Session
.
Session mailSession = Session.getInstance(props,null);
3. Configurar los campos del mensaje

Sobre la sesión de correo vamos a crear un mensaje. Los mensajes se manejan mediante la clase Message
. Para instanciarlo utilizaremos la siguiente línea de código:
Message msg = new MimeMessage(mailSession);

El mensaje hay que rellenarlo con datos: el usuario destino, el texto del mensaje, el «subject» del mensaje,… Para esto contamos con diferentes métodos dentro de la clase MimeMessage
como .setSubject(String)
, setFrom(Adress)
,..
msg.setSubject("Mensaje de Línea de Código");
msg.setFrom(new InternetAddress("web@lineadecodigo.com","Línea de Código"));
msg.addRecipients(Message.RecipientType.TO, new InternetAddress[] { new InternetAddress("miamigo@gmail.com") });

Entremos un poco más en detalle en estos métodos…

En el caso del .setSubject(String)
no tiene mucho misterio, ya que simplemente es una línea de texto que represente el subject del correo.

Para el método .setFrom(Address)
vemos que el parámetro que recibe es una clase Address
. Esta clase viene a abstraer la dirección de email para los correos electrónicos.

Es por ello que tendremos que utilizar el constructor InternetAddress
para crear una dirección de email. El constructor recibe dos parámetros, la dirección de email y el nombre asociado a dicha dirección (nombre que suelen usar los programas de correo como referente).

Veamos esa línea de código:
new InternetAddress("web@lineadecodigo.com","Línea de Código")

A la hora de especificar los destinatarios tenemos que utilizar el método .addRecipients(Message.RecipientType,Adress[])
Los parámetros de este método son dos:

    Message.RecipientType, el tipo de usuario que va a recibir el mensaje. Los valores serían TO, CC, BCC. O en español: para, en copia y en copia oculta.
    Adress[], como direcciones de email. Ya vimos anteriormente que los emails se montan con la clase InternetAddress.

4. Configurar el texto del mensaje

Para insertar el texto del mensaje utilizaremos el método .setDataHandler(DataHandler)
. El handler, representado por un DataHandler
, tendrá el texto que se va a enviar y el tipo de codificación que le queremos aplicar. En este caso será «text/plain», ya que vamos a enviar texto plano.
DataHandler dh = new DataHandler("Texto del mensaje","text/plain");
msg.setDataHandler(dh);
5. Enviar el mensaje

El mensaje se enviará mediante la clase Transport
. Esta clase tiene un método estático que se llama .send(Message)
. Dicho método recibirá el mensaje que hemos montado anteriormente como parámetro y lo enviará.

Solo necesitaremos la siguiente línea de código:
javax.mail.Transport.send(msg);

En el proceso de envío multiples excepciones pueden ser elevadas. Es por ello que deberemos de ejecutar todo nuestro código entre un try-catch
.

Espero que os haya sido sencillo este pequeño ejemplo que paso a paso nos describe cómo mandar emails con JavaMail.

=====================================================================
ASP

Quien no quiere tener en su página un apartado que nos permita enviar noticias, textos,… mediante un email. El envío de email desde la páginas es muy sencillo utilizando el componente activo de servidor ASPEMail desarrollado por la empresa Persits Software, Inc.

Para mandar emails con ASPEmail lo primero que debemos de hacer es crear una instancia del objeto ASPEMail. Para ello utilizaremos el método CreateObject, al cual pasaremos el ID del objeto AspEMail.

Set Mail = Server.CreateObject("Persits.MailSender")

Una vez creado el objeto nos aprovecharemos de los métodos que tiene para enviar el mensaje. Lo primero es indicar el servidor SMTP que utilizaremos para enviar el mensaje.

Mail.host = "smtp.miservidor.com"

Después indicaremos la persona la cual recibirá el mensaje. Esto lo realizaremos a través del método AddAddress, el cual recibe como parámetros la dirección de email y el nombre de la persona de destino. Estos valores los vamos a recoger de un formulario, es por ello que utilizaremos el método Request.Form(«to»), el cual recupera el valor del campo «to» del formulario. Posteriormente indicaremos quien es la persona que envia el mensaje, propiedad From.

Mail.AddAddress Request.Form("to")
Mail.From "usuarior@lineadecodigo.com", "Linea de Código"

Para terminar de rellenar el encabezado deberemos de indicar el motivo del mensaje a través de la propiedad Subject.

Mail.Subject = "Mensaje de prueba de Linea de Código"

Lo único que nos quedará es rellenar el cuerpo del mensaje, para ello utilizaremos la propiedad Body.

Mail.Body = "Esto es una prueba del componente AspEMail 4.5"

Una vez conformado todo el mensaje lo enviamos a través del método Send. Después de enviado podemos comprobar si ha ocurrido algún error a través del objeto Error.

If Err <> 0 Then
     Response.Write(Err.Description)
else
     Response.Write("Mensaje enviado satisfactoriamente")
End If

=========================================================================